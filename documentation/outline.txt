What problem does this app solve?
	People are always asked about their medical history when visiting healthcare facilities. It would be nice to not only have that information on hand as a client, but to be able to receive that information as the healthcare provider through an easy to read method.
	
How does it solve those problems?
	allows a person to have quick access to medical records and the ability for providers to perform/track new medical tests
	
Who is your target user?
	healthcare providers
	general public
	
How much experience do they have with technology?
	intermediate level
		standard web browsing, basic data entry.

when attaching to fitbit api just use https ... no need for cert.
mvp feature set
	user can login
	user can logout
	if the user leaves the page, or refreshes, session is maintained
	if user is not logged in, they cannot see any personalized information and is restricted to the landing page.
	the landing page explains what the app is about and how to use it
	admin can perform crud operations on users
	admin can perform crud operations on tests
	users can search through a list of users (including admin users) as long as they have permission to do so
	user can search every piece of data using a global search
	users can sort the user table by one or more column headers
	users can filter the user table by one or more column headers
	users can add keywords to each record
	user can access the app and have a good user experience on mobile, tablet, and desktop
	users can be flagged as admins
	users can select a user from the table to see more detailed information about that user
	needs to be user messageing when the user performs crud actions
	basic styling
	
add ons
fit bit tracking and reporting from user's fitbit device
d3 graphs on the landing page (once logged in) that will give stats about users and tests
barcode scanner to add test supplies used for test
animations
parrellax effects
ability to email
ability to add attachements to email.
ability to add a user by using a camera to decode their driver's license
spreadsheet creation, export
address api
system guided tutorial
testing
	
Controllers
loginCtrl
	EP:
		POST authkey
landingPagePublicCtrl
	noDB
landingPageUserCtrl
	EP:
		GET global search
		GET user stats by id
landingPageHCPCtrl
	EP:
		GET test stats *
		GET test by user id
		GET test by test id
testCreateCtrl
	EP:
		GET test by id
		GET patient id's
		GET tags
		GET test type's
		GET protocols
		GET operators
		GET instruments
		POST JSON blob
		{
			"serialNumber": "varchar"
			, "sampleId": int
			, "patientId": int
			, "logNumber": "varchar"
			, "tags": array "varchar"
			, "testTypeId": int
			, "protocolId": int
			, "operatorId": int
			, "instrumentId": int
		}
testManageCtrl
	EP:
		GET * tests
		GET test by id
		DELETE test by id
		PUT JSON blob
		{
			"tags": array "varchar" 
		}
		GET default column list by user
		GET user by id
		GET default column list
testDetailsCtrl
	EP:
		GET test by id
userCreateCtrl
	EP:
		GET roles
		GET user by id
		GET medical history list
		GET country list
		GET state list
		GET zipcode list
		POST JSON blob
		{
			"firstName": "varchar"
			, "lastName": "varchar"
			, "dob": date
			, "email": "varchar"
			, "phone": int
			, "address1": "varchar"
			, "address2": "varchar"
			, "city": "varchar"
			, "state": selection "varchar"
			, "country": selection "varchar"
			, "zip": selection int
			, "weight": int
			, "height": int
			, "fitbitId: "varchar"
			, "role": selection "varchar"
			, "familyRelations": {
				"fatherFirstName": "varchar"
				, "fatherLastName": "varchar"
				, "fatherDob": date
				, "motherFirstName": "varchar"
				, "motherMaidenName": "varchar"
				, "motherDob": date
				, "siblings": [{
						"gender": selection "varchar"
						, "firstName": "varchar"
						, "lastName": "varchar"
						, "dob": date
					}
				]
				, "children": [{
						"gender": selection "varchar"
						, "firstName": "varchar"
						, "lastName": "varchar"
						, "dob": date
					}
				]
			}
			, "hideFromPublic": boolean (default to false)
			, "medicalHistory": [{
					"condition": "varchar"
					, "hasHistory": boolean (default to false)
					, "lastRecord": date
				}
			]
		}
userManageCtrl
	EP:
		GET user by id
		DELETE user by id
		GET * users
settingsCtrl
	EP:
		GET user by id
		GET uom
		PUT uom
userStatsCtrl
	EP:
		GET user by id
		GET stats by user id
errorDir (directive)
	EP:
		GET error by id
warningDir (directive)
	EP:
		GET warning by id
		PUT feedback: boolean
		POST feedback: boolean
successDir (directive)
	EP:
		GET success by id
headerDir (directive)
	EP:
		GET user by id
contactCtrl
globalSearchCtrl
	EP:
		GET user by id
		GET * users
		GET * tests
progressBarDir (directive)

SCHEMA
User table
	CREATE TABLE user
	(
		id serial primary key
		, first_name varchar
		, last_name varchar
		, dob date
		, email varchar
		, phone int
		, address1 varchar 
		, address2 varchar
		, city varchar
		, state_id int
		, country_id int
		, zip_id varchar
		, weight int
		, height int
		, fitbit_id varchar
		, role_id varchar
		, family_id int
		, hide_from_public boolean
		, condition_date_id int
		, user_stats_id
	)
Test results table
	CREATE TABLE test_results
	(
		id serial primary key
		, test_type_id int
		, serial_number varchar
		, sample_id int
		, patient_id int
		, lot_number varchar
		, tags_id array int
		, protocol_id int
		, operator_id int
		, instrument_id int
	)

Sample table
	CREATE TABLE sample
	(
		id serial primary key
		, sample_name
		, sample_description
	)

Instrument table
	CREATE TABLE instrument
	(
		id serial primary key
		, instrument_name
		, instrument_description
	)
Country table
	CREATE TABLE country
	(
		id serial primary key
		, country_name
	)
State table
	CREATE TABLE state
	(
		id serial primary key
		, long_name varchar
		, short_name varchar
	)

Notification message table
	CREATE TABLE notification_message
	(
		id serial primary key
		, notification_type varchar
		, needs_feedback boolean
		, message varchar
		, timeout int
		, notification_botton_layout_id int
	)

Notification button layout table
	CREATE TABLE notification_button_layout
	(
		id serial primary key
		, set_type varchar
		, description varchar
	)
	INSERT INTO notification_button_layout
	(set_type, description)
	VALUES 
	(
		"confirmation"
		, "a proceed button typically refered to as proceed, save or continue. a cancel button that will return the user to previous state."
	),
	(
		"user input needed"
		, "a proceed button typically refered to as proceed, save or continue. a cancel button that will return the user to previous state. an ignore but ignore button."
	),
	(
		"no input needed"
		, "no buttons"
	)


Roles table
	CREATE TABLE roles
	(
		id serial primary key
		, public
		, patient
		, operator
		, admin
	)

Family table
	CREATE TABLE family
	(
		id serial primary key
		, father_first_name varchar
		, father_last_name varchar
		, father_dob date
		, mother_first_name varchar
		, mother_last_name varchar
		, mother_maiden_name varchar
		, mother_dob date
		, siblings [{
				gender varchar
				, first_name varchar
				, last_name varchar
				, dob date
			}
		]
		, children [{
				gender varchar
				, first_name varchar
				, last_name varchar
				, dob date
			}
		]
	)

Medical history table
	CREATE TABLE medical_history
	(
		id serial primary key
		, condition varchar
	)

Condition date table
	CREATE TABLE condition_date
	(
		id serial primary key
		, medical_condition_id int
		, user_id int
		, condition_date date
	)

Stats table
	CREATE TABLE user_stats
	(
		id serial primary key
		, user_id int
		, avg_active_time time
		, avg_bp varchar
		, avg_hr varchar
		, current_weight
		, avg_sleep
	)


test type
	CREATE TABLE test_type
	(
		id serial primary key
		, name varchar
		, description varchar
	)

protocol
	CREATE TABLE protocol
	(
		id serial primary key
		, protocol_type varchar
	)

tags
	CREATE TABLE tags
	(
		id serial primary key
		, tag_name
	)

testDefaultColumn table
	CREATE TABLE test_default_columns
	(
		id serial primary key
		, column1 varchar
		, column2 varchar
		, column3 varchar
		, column4 varchar
		, column5 varchar
		, column6 varchar
		, column7 varchar
		, column8 varchar
	)


userDefaultColumn table
	CREATE TABLE user_default_columns
	(
		id serial primary key
		, column1 varchar
		, column2 varchar
		, column3 varchar
		, column4 varchar
		, column5 varchar
		, column6 varchar
		, column7 varchar
		, column8 varchar
	)


